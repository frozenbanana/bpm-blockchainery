issues scalability and privacy

obscurity: You have a program with some logic
    that program is stored on-chain
    logic is obscured. None can see what it actually does
    program still has same interface, but logic of it is obscure
    perfect obscurity is impossible 
indistinguishablility obscurity: 
    is possible 
    I do not understand the examplewith the priate key????
    Two programs that do the same calc, but in a different way can not be distinguished
    [...] cannot be distinguished from each other, and so someone in possession of the obfuscated program definitely has no way of extracting the private key - otherwise, that would be [...]
    takes forever
    Can we use any kind of obscurity at all???

secure multi-party computation (SMPC): 
    Split a computation among parties
    each party has to to their part to get the result (e.g. decrypted val) in the end
    good if you can trust parties, not good if you can not
    So this is no good for us???
    Parties could try to monitor each other by saving the calculated data

Succinct arguments of knowledge (SNARK):
    zero knowledge for programs: Can prove that a program 
        with input x has some output y, without showing what the program does
    Implementation: Put hash of financial smart contract on chain
        logic off-chain
        Both parties calc who gets what
        Funds are in the smart-contract on the chain
        At the end the parties get their money
        outsiders can observe that, but do not know why, because they do not know the logic of the contract

Hawk project:
    just use one-time accounts and insure privacy this way
    more advanced: Users pay coins in a pod (anonymous)
    Pod is emptied again (anonymous). Coins may have changed possession, but we do not know if or to who
    This can also be done with smart contracts: 
        parties put money in pod, together with hashed smart contract
        both parties calc how much each on owes to the other
        If they both send the same result, then the agree and funds are send to them
        If they do not agree one releases the smart contract and it does the actual calc and then sends the money

Data applications:
    store data in blockchain (e.g. IPFS)
    preserve privacy by encrypting documents
    grant permission to someone by giving them the key
    key can be generated from deterministic wallet
        key generated from seed
    this way the user can only see one document, not all of them

problems: 
    Outsider can still analyse metadata of all this and derive conclusions
    Developers are provided with turing-complete language and are unaware of complexity of underlying system


